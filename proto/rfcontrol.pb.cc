// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rfcontrol.proto

#include "rfcontrol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace rfcontrol {
class RFConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RFConfig> _instance;
} _RFConfig_default_instance_;
class DeviceQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceQuery> _instance;
} _DeviceQuery_default_instance_;
class RFResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RFResponse> _instance;
} _RFResponse_default_instance_;
class CurrentSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrentSettings> _instance;
} _CurrentSettings_default_instance_;
}  // namespace rfcontrol
static void InitDefaultsscc_info_CurrentSettings_rfcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rfcontrol::_CurrentSettings_default_instance_;
    new (ptr) ::rfcontrol::CurrentSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rfcontrol::CurrentSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurrentSettings_rfcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CurrentSettings_rfcontrol_2eproto}, {}};

static void InitDefaultsscc_info_DeviceQuery_rfcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rfcontrol::_DeviceQuery_default_instance_;
    new (ptr) ::rfcontrol::DeviceQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rfcontrol::DeviceQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceQuery_rfcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceQuery_rfcontrol_2eproto}, {}};

static void InitDefaultsscc_info_RFConfig_rfcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rfcontrol::_RFConfig_default_instance_;
    new (ptr) ::rfcontrol::RFConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rfcontrol::RFConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RFConfig_rfcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RFConfig_rfcontrol_2eproto}, {}};

static void InitDefaultsscc_info_RFResponse_rfcontrol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rfcontrol::_RFResponse_default_instance_;
    new (ptr) ::rfcontrol::RFResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rfcontrol::RFResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RFResponse_rfcontrol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RFResponse_rfcontrol_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rfcontrol_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rfcontrol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rfcontrol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rfcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rfcontrol::RFConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rfcontrol::RFConfig, device_id_),
  PROTOBUF_FIELD_OFFSET(::rfcontrol::RFConfig, frequency_),
  PROTOBUF_FIELD_OFFSET(::rfcontrol::RFConfig, gain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rfcontrol::DeviceQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rfcontrol::DeviceQuery, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rfcontrol::RFResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rfcontrol::RFResponse, success_),
  PROTOBUF_FIELD_OFFSET(::rfcontrol::RFResponse, message_),
  PROTOBUF_FIELD_OFFSET(::rfcontrol::RFResponse, device_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rfcontrol::CurrentSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rfcontrol::CurrentSettings, device_id_),
  PROTOBUF_FIELD_OFFSET(::rfcontrol::CurrentSettings, current_frequency_),
  PROTOBUF_FIELD_OFFSET(::rfcontrol::CurrentSettings, current_gain_),
  PROTOBUF_FIELD_OFFSET(::rfcontrol::CurrentSettings, status_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rfcontrol::RFConfig)},
  { 8, -1, sizeof(::rfcontrol::DeviceQuery)},
  { 14, -1, sizeof(::rfcontrol::RFResponse)},
  { 22, -1, sizeof(::rfcontrol::CurrentSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rfcontrol::_RFConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rfcontrol::_DeviceQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rfcontrol::_RFResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rfcontrol::_CurrentSettings_default_instance_),
};

const char descriptor_table_protodef_rfcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017rfcontrol.proto\022\trfcontrol\">\n\010RFConfig"
  "\022\021\n\tdevice_id\030\001 \001(\t\022\021\n\tfrequency\030\002 \001(\001\022\014"
  "\n\004gain\030\003 \001(\001\" \n\013DeviceQuery\022\021\n\tdevice_id"
  "\030\001 \001(\t\"E\n\nRFResponse\022\017\n\007success\030\001 \001(\010\022\017\n"
  "\007message\030\002 \001(\t\022\025\n\rdevice_status\030\003 \001(\t\"m\n"
  "\017CurrentSettings\022\021\n\tdevice_id\030\001 \001(\t\022\031\n\021c"
  "urrent_frequency\030\002 \001(\001\022\024\n\014current_gain\030\003"
  " \001(\001\022\026\n\016status_message\030\004 \001(\t2\231\001\n\014RFContr"
  "oller\022=\n\rSetRFSettings\022\023.rfcontrol.RFCon"
  "fig\032\025.rfcontrol.RFResponse\"\000\022J\n\022GetCurre"
  "ntSettings\022\026.rfcontrol.DeviceQuery\032\032.rfc"
  "ontrol.CurrentSettings\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rfcontrol_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rfcontrol_2eproto_sccs[4] = {
  &scc_info_CurrentSettings_rfcontrol_2eproto.base,
  &scc_info_DeviceQuery_rfcontrol_2eproto.base,
  &scc_info_RFConfig_rfcontrol_2eproto.base,
  &scc_info_RFResponse_rfcontrol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rfcontrol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rfcontrol_2eproto = {
  false, false, descriptor_table_protodef_rfcontrol_2eproto, "rfcontrol.proto", 472,
  &descriptor_table_rfcontrol_2eproto_once, descriptor_table_rfcontrol_2eproto_sccs, descriptor_table_rfcontrol_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_rfcontrol_2eproto::offsets,
  file_level_metadata_rfcontrol_2eproto, 4, file_level_enum_descriptors_rfcontrol_2eproto, file_level_service_descriptors_rfcontrol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rfcontrol_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rfcontrol_2eproto)), true);
namespace rfcontrol {

// ===================================================================

void RFConfig::InitAsDefaultInstance() {
}
class RFConfig::_Internal {
 public:
};

RFConfig::RFConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rfcontrol.RFConfig)
}
RFConfig::RFConfig(const RFConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  ::memcpy(&frequency_, &from.frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&frequency_)) + sizeof(gain_));
  // @@protoc_insertion_point(copy_constructor:rfcontrol.RFConfig)
}

void RFConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RFConfig_rfcontrol_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(gain_));
}

RFConfig::~RFConfig() {
  // @@protoc_insertion_point(destructor:rfcontrol.RFConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RFConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RFConfig::ArenaDtor(void* object) {
  RFConfig* _this = reinterpret_cast< RFConfig* >(object);
  (void)_this;
}
void RFConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RFConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RFConfig& RFConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RFConfig_rfcontrol_2eproto.base);
  return *internal_default_instance();
}


void RFConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:rfcontrol.RFConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(gain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RFConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rfcontrol.RFConfig.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RFConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rfcontrol.RFConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rfcontrol.RFConfig.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // double frequency = 2;
  if (!(this->frequency() <= 0 && this->frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_frequency(), target);
  }

  // double gain = 3;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_gain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rfcontrol.RFConfig)
  return target;
}

size_t RFConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rfcontrol.RFConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // double frequency = 2;
  if (!(this->frequency() <= 0 && this->frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double gain = 3;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RFConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rfcontrol.RFConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RFConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RFConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rfcontrol.RFConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rfcontrol.RFConfig)
    MergeFrom(*source);
  }
}

void RFConfig::MergeFrom(const RFConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rfcontrol.RFConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (!(from.frequency() <= 0 && from.frequency() >= 0)) {
    _internal_set_frequency(from._internal_frequency());
  }
  if (!(from.gain() <= 0 && from.gain() >= 0)) {
    _internal_set_gain(from._internal_gain());
  }
}

void RFConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rfcontrol.RFConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RFConfig::CopyFrom(const RFConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rfcontrol.RFConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RFConfig::IsInitialized() const {
  return true;
}

void RFConfig::InternalSwap(RFConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RFConfig, gain_)
      + sizeof(RFConfig::gain_)
      - PROTOBUF_FIELD_OFFSET(RFConfig, frequency_)>(
          reinterpret_cast<char*>(&frequency_),
          reinterpret_cast<char*>(&other->frequency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RFConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceQuery::InitAsDefaultInstance() {
}
class DeviceQuery::_Internal {
 public:
};

DeviceQuery::DeviceQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rfcontrol.DeviceQuery)
}
DeviceQuery::DeviceQuery(const DeviceQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:rfcontrol.DeviceQuery)
}

void DeviceQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceQuery_rfcontrol_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceQuery::~DeviceQuery() {
  // @@protoc_insertion_point(destructor:rfcontrol.DeviceQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceQuery::ArenaDtor(void* object) {
  DeviceQuery* _this = reinterpret_cast< DeviceQuery* >(object);
  (void)_this;
}
void DeviceQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceQuery& DeviceQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceQuery_rfcontrol_2eproto.base);
  return *internal_default_instance();
}


void DeviceQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:rfcontrol.DeviceQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rfcontrol.DeviceQuery.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rfcontrol.DeviceQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rfcontrol.DeviceQuery.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rfcontrol.DeviceQuery)
  return target;
}

size_t DeviceQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rfcontrol.DeviceQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rfcontrol.DeviceQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rfcontrol.DeviceQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rfcontrol.DeviceQuery)
    MergeFrom(*source);
  }
}

void DeviceQuery::MergeFrom(const DeviceQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rfcontrol.DeviceQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
}

void DeviceQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rfcontrol.DeviceQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceQuery::CopyFrom(const DeviceQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rfcontrol.DeviceQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceQuery::IsInitialized() const {
  return true;
}

void DeviceQuery::InternalSwap(DeviceQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RFResponse::InitAsDefaultInstance() {
}
class RFResponse::_Internal {
 public:
};

RFResponse::RFResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rfcontrol.RFResponse)
}
RFResponse::RFResponse(const RFResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  device_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_status().empty()) {
    device_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_status(),
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:rfcontrol.RFResponse)
}

void RFResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RFResponse_rfcontrol_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

RFResponse::~RFResponse() {
  // @@protoc_insertion_point(destructor:rfcontrol.RFResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RFResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RFResponse::ArenaDtor(void* object) {
  RFResponse* _this = reinterpret_cast< RFResponse* >(object);
  (void)_this;
}
void RFResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RFResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RFResponse& RFResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RFResponse_rfcontrol_2eproto.base);
  return *internal_default_instance();
}


void RFResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rfcontrol.RFResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RFResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rfcontrol.RFResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_device_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rfcontrol.RFResponse.device_status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RFResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rfcontrol.RFResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rfcontrol.RFResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string device_status = 3;
  if (this->device_status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_status().data(), static_cast<int>(this->_internal_device_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rfcontrol.RFResponse.device_status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rfcontrol.RFResponse)
  return target;
}

size_t RFResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rfcontrol.RFResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string device_status = 3;
  if (this->device_status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_status());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RFResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rfcontrol.RFResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RFResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RFResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rfcontrol.RFResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rfcontrol.RFResponse)
    MergeFrom(*source);
  }
}

void RFResponse::MergeFrom(const RFResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rfcontrol.RFResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.device_status().size() > 0) {
    _internal_set_device_status(from._internal_device_status());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void RFResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rfcontrol.RFResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RFResponse::CopyFrom(const RFResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rfcontrol.RFResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RFResponse::IsInitialized() const {
  return true;
}

void RFResponse::InternalSwap(RFResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_status_.Swap(&other->device_status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RFResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurrentSettings::InitAsDefaultInstance() {
}
class CurrentSettings::_Internal {
 public:
};

CurrentSettings::CurrentSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rfcontrol.CurrentSettings)
}
CurrentSettings::CurrentSettings(const CurrentSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  status_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status_message().empty()) {
    status_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status_message(),
      GetArena());
  }
  ::memcpy(&current_frequency_, &from.current_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_gain_) -
    reinterpret_cast<char*>(&current_frequency_)) + sizeof(current_gain_));
  // @@protoc_insertion_point(copy_constructor:rfcontrol.CurrentSettings)
}

void CurrentSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurrentSettings_rfcontrol_2eproto.base);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_gain_) -
      reinterpret_cast<char*>(&current_frequency_)) + sizeof(current_gain_));
}

CurrentSettings::~CurrentSettings() {
  // @@protoc_insertion_point(destructor:rfcontrol.CurrentSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurrentSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurrentSettings::ArenaDtor(void* object) {
  CurrentSettings* _this = reinterpret_cast< CurrentSettings* >(object);
  (void)_this;
}
void CurrentSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrentSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrentSettings& CurrentSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrentSettings_rfcontrol_2eproto.base);
  return *internal_default_instance();
}


void CurrentSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:rfcontrol.CurrentSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&current_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_gain_) -
      reinterpret_cast<char*>(&current_frequency_)) + sizeof(current_gain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rfcontrol.CurrentSettings.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double current_frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          current_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double current_gain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          current_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string status_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_status_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rfcontrol.CurrentSettings.status_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrentSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rfcontrol.CurrentSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rfcontrol.CurrentSettings.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // double current_frequency = 2;
  if (!(this->current_frequency() <= 0 && this->current_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_current_frequency(), target);
  }

  // double current_gain = 3;
  if (!(this->current_gain() <= 0 && this->current_gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_current_gain(), target);
  }

  // string status_message = 4;
  if (this->status_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_message().data(), static_cast<int>(this->_internal_status_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rfcontrol.CurrentSettings.status_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rfcontrol.CurrentSettings)
  return target;
}

size_t CurrentSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rfcontrol.CurrentSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string status_message = 4;
  if (this->status_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_message());
  }

  // double current_frequency = 2;
  if (!(this->current_frequency() <= 0 && this->current_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double current_gain = 3;
  if (!(this->current_gain() <= 0 && this->current_gain() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rfcontrol.CurrentSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrentSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rfcontrol.CurrentSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rfcontrol.CurrentSettings)
    MergeFrom(*source);
  }
}

void CurrentSettings::MergeFrom(const CurrentSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rfcontrol.CurrentSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.status_message().size() > 0) {
    _internal_set_status_message(from._internal_status_message());
  }
  if (!(from.current_frequency() <= 0 && from.current_frequency() >= 0)) {
    _internal_set_current_frequency(from._internal_current_frequency());
  }
  if (!(from.current_gain() <= 0 && from.current_gain() >= 0)) {
    _internal_set_current_gain(from._internal_current_gain());
  }
}

void CurrentSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rfcontrol.CurrentSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentSettings::CopyFrom(const CurrentSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rfcontrol.CurrentSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentSettings::IsInitialized() const {
  return true;
}

void CurrentSettings::InternalSwap(CurrentSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_message_.Swap(&other->status_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CurrentSettings, current_gain_)
      + sizeof(CurrentSettings::current_gain_)
      - PROTOBUF_FIELD_OFFSET(CurrentSettings, current_frequency_)>(
          reinterpret_cast<char*>(&current_frequency_),
          reinterpret_cast<char*>(&other->current_frequency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rfcontrol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rfcontrol::RFConfig* Arena::CreateMaybeMessage< ::rfcontrol::RFConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rfcontrol::RFConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::rfcontrol::DeviceQuery* Arena::CreateMaybeMessage< ::rfcontrol::DeviceQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rfcontrol::DeviceQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::rfcontrol::RFResponse* Arena::CreateMaybeMessage< ::rfcontrol::RFResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rfcontrol::RFResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::rfcontrol::CurrentSettings* Arena::CreateMaybeMessage< ::rfcontrol::CurrentSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rfcontrol::CurrentSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
