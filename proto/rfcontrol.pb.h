#ifndef GOOGLE_PROTOBUF_INCLUDED_rfcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rfcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  
#include <google/protobuf/extension_set.h>  
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rfcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
} 
PROTOBUF_NAMESPACE_CLOSE

struct TableStruct_rfcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rfcontrol_2eproto;
namespace rfcontrol {
class CurrentSettings;
class CurrentSettingsDefaultTypeInternal;
extern CurrentSettingsDefaultTypeInternal _CurrentSettings_default_instance_;
class DeviceQuery;
class DeviceQueryDefaultTypeInternal;
extern DeviceQueryDefaultTypeInternal _DeviceQuery_default_instance_;
class RFConfig;
class RFConfigDefaultTypeInternal;
extern RFConfigDefaultTypeInternal _RFConfig_default_instance_;
class RFResponse;
class RFResponseDefaultTypeInternal;
extern RFResponseDefaultTypeInternal _RFResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::rfcontrol::CurrentSettings* Arena::CreateMaybeMessage<::rfcontrol::CurrentSettings>(Arena*);
template<> ::rfcontrol::DeviceQuery* Arena::CreateMaybeMessage<::rfcontrol::DeviceQuery>(Arena*);
template<> ::rfcontrol::RFConfig* Arena::CreateMaybeMessage<::rfcontrol::RFConfig>(Arena*);
template<> ::rfcontrol::RFResponse* Arena::CreateMaybeMessage<::rfcontrol::RFResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rfcontrol {


class RFConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message 
 public:
  inline RFConfig() : RFConfig(nullptr) {};
  virtual ~RFConfig();

  RFConfig(const RFConfig& from);
  RFConfig(RFConfig&& from) noexcept
    : RFConfig() {
    *this = ::std::move(from);
  }

  inline RFConfig& operator=(const RFConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RFConfig& operator=(RFConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RFConfig& default_instance();

  static void InitAsDefaultInstance(); 
  static inline const RFConfig* internal_default_instance() {
    return reinterpret_cast<const RFConfig*>(
               &_RFConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RFConfig& a, RFConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RFConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RFConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }


  inline RFConfig* New() const final {
    return CreateMaybeMessage<RFConfig>(nullptr);
  }

  RFConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RFConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RFConfig& from);
  void MergeFrom(const RFConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RFConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rfcontrol.RFConfig";
  }
  protected:
  explicit RFConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rfcontrol_2eproto);
    return ::descriptor_table_rfcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:


  enum : int {
    kDeviceIdFieldNumber = 1,
    kFrequencyFieldNumber = 2,
    kGainFieldNumber = 3,
  };
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  void clear_frequency();
  double frequency() const;
  void set_frequency(double value);
  private:
  double _internal_frequency() const;
  void _internal_set_frequency(double value);
  public:

  void clear_gain();
  double gain() const;
  void set_gain(double value);
  private:
  double _internal_gain() const;
  void _internal_set_gain(double value);
  public:

 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  double frequency_;
  double gain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rfcontrol_2eproto;
};

class DeviceQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message 
 public:
  inline DeviceQuery() : DeviceQuery(nullptr) {};
  virtual ~DeviceQuery();

  DeviceQuery(const DeviceQuery& from);
  DeviceQuery(DeviceQuery&& from) noexcept
    : DeviceQuery() {
    *this = ::std::move(from);
  }

  inline DeviceQuery& operator=(const DeviceQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceQuery& operator=(DeviceQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceQuery& default_instance();

  static void InitAsDefaultInstance(); 
  static inline const DeviceQuery* internal_default_instance() {
    return reinterpret_cast<const DeviceQuery*>(
               &_DeviceQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceQuery& a, DeviceQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }


  inline DeviceQuery* New() const final {
    return CreateMaybeMessage<DeviceQuery>(nullptr);
  }

  DeviceQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceQuery& from);
  void MergeFrom(const DeviceQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rfcontrol.DeviceQuery";
  }
  protected:
  explicit DeviceQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rfcontrol_2eproto);
    return ::descriptor_table_rfcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:


  enum : int {
    kDeviceIdFieldNumber = 1,
  };
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // @@protoc_insertion_point(class_scope:rfcontrol.DeviceQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rfcontrol_2eproto;
};
// -------------------------------------------------------------------

class RFResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rfcontrol.RFResponse) */ {
 public:
  inline RFResponse() : RFResponse(nullptr) {};
  virtual ~RFResponse();

  RFResponse(const RFResponse& from);
  RFResponse(RFResponse&& from) noexcept
    : RFResponse() {
    *this = ::std::move(from);
  }

  inline RFResponse& operator=(const RFResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RFResponse& operator=(RFResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RFResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RFResponse* internal_default_instance() {
    return reinterpret_cast<const RFResponse*>(
               &_RFResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RFResponse& a, RFResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RFResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RFResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RFResponse* New() const final {
    return CreateMaybeMessage<RFResponse>(nullptr);
  }

  RFResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RFResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RFResponse& from);
  void MergeFrom(const RFResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RFResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rfcontrol.RFResponse";
  }
  protected:
  explicit RFResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rfcontrol_2eproto);
    return ::descriptor_table_rfcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDeviceStatusFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string device_status = 3;
  void clear_device_status();
  const std::string& device_status() const;
  void set_device_status(const std::string& value);
  void set_device_status(std::string&& value);
  void set_device_status(const char* value);
  void set_device_status(const char* value, size_t size);
  std::string* mutable_device_status();
  std::string* release_device_status();
  void set_allocated_device_status(std::string* device_status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_status(
      std::string* device_status);
  private:
  const std::string& _internal_device_status() const;
  void _internal_set_device_status(const std::string& value);
  std::string* _internal_mutable_device_status();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rfcontrol.RFResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_status_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rfcontrol_2eproto;
};
// -------------------------------------------------------------------

class CurrentSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rfcontrol.CurrentSettings) */ {
 public:
  inline CurrentSettings() : CurrentSettings(nullptr) {};
  virtual ~CurrentSettings();

  CurrentSettings(const CurrentSettings& from);
  CurrentSettings(CurrentSettings&& from) noexcept
    : CurrentSettings() {
    *this = ::std::move(from);
  }

  inline CurrentSettings& operator=(const CurrentSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentSettings& operator=(CurrentSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurrentSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrentSettings* internal_default_instance() {
    return reinterpret_cast<const CurrentSettings*>(
               &_CurrentSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CurrentSettings& a, CurrentSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurrentSettings* New() const final {
    return CreateMaybeMessage<CurrentSettings>(nullptr);
  }

  CurrentSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurrentSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurrentSettings& from);
  void MergeFrom(const CurrentSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rfcontrol.CurrentSettings";
  }
  protected:
  explicit CurrentSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rfcontrol_2eproto);
    return ::descriptor_table_rfcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kStatusMessageFieldNumber = 4,
    kCurrentFrequencyFieldNumber = 2,
    kCurrentGainFieldNumber = 3,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string status_message = 4;
  void clear_status_message();
  const std::string& status_message() const;
  void set_status_message(const std::string& value);
  void set_status_message(std::string&& value);
  void set_status_message(const char* value);
  void set_status_message(const char* value, size_t size);
  std::string* mutable_status_message();
  std::string* release_status_message();
  void set_allocated_status_message(std::string* status_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status_message(
      std::string* status_message);
  private:
  const std::string& _internal_status_message() const;
  void _internal_set_status_message(const std::string& value);
  std::string* _internal_mutable_status_message();
  public:

  // double current_frequency = 2;
  void clear_current_frequency();
  double current_frequency() const;
  void set_current_frequency(double value);
  private:
  double _internal_current_frequency() const;
  void _internal_set_current_frequency(double value);
  public:

  // double current_gain = 3;
  void clear_current_gain();
  double current_gain() const;
  void set_current_gain(double value);
  private:
  double _internal_current_gain() const;
  void _internal_set_current_gain(double value);
  public:

  // @@protoc_insertion_point(class_scope:rfcontrol.CurrentSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_message_;
  double current_frequency_;
  double current_gain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rfcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RFConfig

// string device_id = 1;
inline void RFConfig::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RFConfig::device_id() const {
  // @@protoc_insertion_point(field_get:rfcontrol.RFConfig.device_id)
  return _internal_device_id();
}
inline void RFConfig::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:rfcontrol.RFConfig.device_id)
}
inline std::string* RFConfig::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:rfcontrol.RFConfig.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& RFConfig::_internal_device_id() const {
  return device_id_.Get();
}
inline void RFConfig::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RFConfig::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rfcontrol.RFConfig.device_id)
}
inline void RFConfig::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rfcontrol.RFConfig.device_id)
}
inline void RFConfig::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rfcontrol.RFConfig.device_id)
}
inline std::string* RFConfig::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RFConfig::release_device_id() {
  // @@protoc_insertion_point(field_release:rfcontrol.RFConfig.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RFConfig::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rfcontrol.RFConfig.device_id)
}
inline std::string* RFConfig::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rfcontrol.RFConfig.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RFConfig::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rfcontrol.RFConfig.device_id)
}

// double frequency = 2;
inline void RFConfig::clear_frequency() {
  frequency_ = 0;
}
inline double RFConfig::_internal_frequency() const {
  return frequency_;
}
inline double RFConfig::frequency() const {
  // @@protoc_insertion_point(field_get:rfcontrol.RFConfig.frequency)
  return _internal_frequency();
}
inline void RFConfig::_internal_set_frequency(double value) {
  
  frequency_ = value;
}
inline void RFConfig::set_frequency(double value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:rfcontrol.RFConfig.frequency)
}

// double gain = 3;
inline void RFConfig::clear_gain() {
  gain_ = 0;
}
inline double RFConfig::_internal_gain() const {
  return gain_;
}
inline double RFConfig::gain() const {
  // @@protoc_insertion_point(field_get:rfcontrol.RFConfig.gain)
  return _internal_gain();
}
inline void RFConfig::_internal_set_gain(double value) {
  
  gain_ = value;
}
inline void RFConfig::set_gain(double value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:rfcontrol.RFConfig.gain)
}

// -------------------------------------------------------------------

// DeviceQuery

// string device_id = 1;
inline void DeviceQuery::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceQuery::device_id() const {
  // @@protoc_insertion_point(field_get:rfcontrol.DeviceQuery.device_id)
  return _internal_device_id();
}
inline void DeviceQuery::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:rfcontrol.DeviceQuery.device_id)
}
inline std::string* DeviceQuery::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:rfcontrol.DeviceQuery.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& DeviceQuery::_internal_device_id() const {
  return device_id_.Get();
}
inline void DeviceQuery::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceQuery::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rfcontrol.DeviceQuery.device_id)
}
inline void DeviceQuery::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rfcontrol.DeviceQuery.device_id)
}
inline void DeviceQuery::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rfcontrol.DeviceQuery.device_id)
}
inline std::string* DeviceQuery::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceQuery::release_device_id() {
  // @@protoc_insertion_point(field_release:rfcontrol.DeviceQuery.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceQuery::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rfcontrol.DeviceQuery.device_id)
}
inline std::string* DeviceQuery::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rfcontrol.DeviceQuery.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceQuery::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rfcontrol.DeviceQuery.device_id)
}

// -------------------------------------------------------------------

// RFResponse

// bool success = 1;
inline void RFResponse::clear_success() {
  success_ = false;
}
inline bool RFResponse::_internal_success() const {
  return success_;
}
inline bool RFResponse::success() const {
  // @@protoc_insertion_point(field_get:rfcontrol.RFResponse.success)
  return _internal_success();
}
inline void RFResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RFResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:rfcontrol.RFResponse.success)
}

// string message = 2;
inline void RFResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RFResponse::message() const {
  // @@protoc_insertion_point(field_get:rfcontrol.RFResponse.message)
  return _internal_message();
}
inline void RFResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:rfcontrol.RFResponse.message)
}
inline std::string* RFResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:rfcontrol.RFResponse.message)
  return _internal_mutable_message();
}
inline const std::string& RFResponse::_internal_message() const {
  return message_.Get();
}
inline void RFResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RFResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rfcontrol.RFResponse.message)
}
inline void RFResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rfcontrol.RFResponse.message)
}
inline void RFResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rfcontrol.RFResponse.message)
}
inline std::string* RFResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RFResponse::release_message() {
  // @@protoc_insertion_point(field_release:rfcontrol.RFResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RFResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rfcontrol.RFResponse.message)
}
inline std::string* RFResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rfcontrol.RFResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RFResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rfcontrol.RFResponse.message)
}

// string device_status = 3;
inline void RFResponse::clear_device_status() {
  device_status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RFResponse::device_status() const {
  // @@protoc_insertion_point(field_get:rfcontrol.RFResponse.device_status)
  return _internal_device_status();
}
inline void RFResponse::set_device_status(const std::string& value) {
  _internal_set_device_status(value);
  // @@protoc_insertion_point(field_set:rfcontrol.RFResponse.device_status)
}
inline std::string* RFResponse::mutable_device_status() {
  // @@protoc_insertion_point(field_mutable:rfcontrol.RFResponse.device_status)
  return _internal_mutable_device_status();
}
inline const std::string& RFResponse::_internal_device_status() const {
  return device_status_.Get();
}
inline void RFResponse::_internal_set_device_status(const std::string& value) {
  
  device_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RFResponse::set_device_status(std::string&& value) {
  
  device_status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rfcontrol.RFResponse.device_status)
}
inline void RFResponse::set_device_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rfcontrol.RFResponse.device_status)
}
inline void RFResponse::set_device_status(const char* value,
    size_t size) {
  
  device_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rfcontrol.RFResponse.device_status)
}
inline std::string* RFResponse::_internal_mutable_device_status() {
  
  return device_status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RFResponse::release_device_status() {
  // @@protoc_insertion_point(field_release:rfcontrol.RFResponse.device_status)
  return device_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RFResponse::set_allocated_device_status(std::string* device_status) {
  if (device_status != nullptr) {
    
  } else {
    
  }
  device_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rfcontrol.RFResponse.device_status)
}
inline std::string* RFResponse::unsafe_arena_release_device_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rfcontrol.RFResponse.device_status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RFResponse::unsafe_arena_set_allocated_device_status(
    std::string* device_status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_status != nullptr) {
    
  } else {
    
  }
  device_status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rfcontrol.RFResponse.device_status)
}

// -------------------------------------------------------------------

// CurrentSettings

// string device_id = 1;
inline void CurrentSettings::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CurrentSettings::device_id() const {
  // @@protoc_insertion_point(field_get:rfcontrol.CurrentSettings.device_id)
  return _internal_device_id();
}
inline void CurrentSettings::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:rfcontrol.CurrentSettings.device_id)
}
inline std::string* CurrentSettings::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:rfcontrol.CurrentSettings.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& CurrentSettings::_internal_device_id() const {
  return device_id_.Get();
}
inline void CurrentSettings::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CurrentSettings::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rfcontrol.CurrentSettings.device_id)
}
inline void CurrentSettings::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rfcontrol.CurrentSettings.device_id)
}
inline void CurrentSettings::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rfcontrol.CurrentSettings.device_id)
}
inline std::string* CurrentSettings::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CurrentSettings::release_device_id() {
  // @@protoc_insertion_point(field_release:rfcontrol.CurrentSettings.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CurrentSettings::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rfcontrol.CurrentSettings.device_id)
}
inline std::string* CurrentSettings::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rfcontrol.CurrentSettings.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CurrentSettings::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rfcontrol.CurrentSettings.device_id)
}

// double current_frequency = 2;
inline void CurrentSettings::clear_current_frequency() {
  current_frequency_ = 0;
}
inline double CurrentSettings::_internal_current_frequency() const {
  return current_frequency_;
}
inline double CurrentSettings::current_frequency() const {
  // @@protoc_insertion_point(field_get:rfcontrol.CurrentSettings.current_frequency)
  return _internal_current_frequency();
}
inline void CurrentSettings::_internal_set_current_frequency(double value) {
  
  current_frequency_ = value;
}
inline void CurrentSettings::set_current_frequency(double value) {
  _internal_set_current_frequency(value);
  // @@protoc_insertion_point(field_set:rfcontrol.CurrentSettings.current_frequency)
}

// double current_gain = 3;
inline void CurrentSettings::clear_current_gain() {
  current_gain_ = 0;
}
inline double CurrentSettings::_internal_current_gain() const {
  return current_gain_;
}
inline double CurrentSettings::current_gain() const {
  // @@protoc_insertion_point(field_get:rfcontrol.CurrentSettings.current_gain)
  return _internal_current_gain();
}
inline void CurrentSettings::_internal_set_current_gain(double value) {
  
  current_gain_ = value;
}
inline void CurrentSettings::set_current_gain(double value) {
  _internal_set_current_gain(value);
  // @@protoc_insertion_point(field_set:rfcontrol.CurrentSettings.current_gain)
}

// string status_message = 4;
inline void CurrentSettings::clear_status_message() {
  status_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CurrentSettings::status_message() const {
  // @@protoc_insertion_point(field_get:rfcontrol.CurrentSettings.status_message)
  return _internal_status_message();
}
inline void CurrentSettings::set_status_message(const std::string& value) {
  _internal_set_status_message(value);
  // @@protoc_insertion_point(field_set:rfcontrol.CurrentSettings.status_message)
}
inline std::string* CurrentSettings::mutable_status_message() {
  // @@protoc_insertion_point(field_mutable:rfcontrol.CurrentSettings.status_message)
  return _internal_mutable_status_message();
}
inline const std::string& CurrentSettings::_internal_status_message() const {
  return status_message_.Get();
}
inline void CurrentSettings::_internal_set_status_message(const std::string& value) {
  
  status_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CurrentSettings::set_status_message(std::string&& value) {
  
  status_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rfcontrol.CurrentSettings.status_message)
}
inline void CurrentSettings::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rfcontrol.CurrentSettings.status_message)
}
inline void CurrentSettings::set_status_message(const char* value,
    size_t size) {
  
  status_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rfcontrol.CurrentSettings.status_message)
}
inline std::string* CurrentSettings::_internal_mutable_status_message() {
  
  return status_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CurrentSettings::release_status_message() {
  // @@protoc_insertion_point(field_release:rfcontrol.CurrentSettings.status_message)
  return status_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CurrentSettings::set_allocated_status_message(std::string* status_message) {
  if (status_message != nullptr) {
    
  } else {
    
  }
  status_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rfcontrol.CurrentSettings.status_message)
}
inline std::string* CurrentSettings::unsafe_arena_release_status_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rfcontrol.CurrentSettings.status_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CurrentSettings::unsafe_arena_set_allocated_status_message(
    std::string* status_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status_message != nullptr) {
    
  } else {
    
  }
  status_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rfcontrol.CurrentSettings.status_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rfcontrol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rfcontrol_2eproto
