// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rfcontrol.proto

#include "rfcontrol.pb.h"
#include "rfcontrol.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rfcontrol {

static const char* RFController_method_names[] = {
  "/rfcontrol.RFController/SetRFSettings",
  "/rfcontrol.RFController/GetCurrentSettings",
};

std::unique_ptr< RFController::Stub> RFController::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RFController::Stub> stub(new RFController::Stub(channel));
  return stub;
}

RFController::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetRFSettings_(RFController_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrentSettings_(RFController_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RFController::Stub::SetRFSettings(::grpc::ClientContext* context, const ::rfcontrol::RFConfig& request, ::rfcontrol::RFResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRFSettings_, context, request, response);
}

void RFController::Stub::experimental_async::SetRFSettings(::grpc::ClientContext* context, const ::rfcontrol::RFConfig* request, ::rfcontrol::RFResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRFSettings_, context, request, response, std::move(f));
}

void RFController::Stub::experimental_async::SetRFSettings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rfcontrol::RFResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRFSettings_, context, request, response, std::move(f));
}

void RFController::Stub::experimental_async::SetRFSettings(::grpc::ClientContext* context, const ::rfcontrol::RFConfig* request, ::rfcontrol::RFResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRFSettings_, context, request, response, reactor);
}

void RFController::Stub::experimental_async::SetRFSettings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rfcontrol::RFResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRFSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rfcontrol::RFResponse>* RFController::Stub::AsyncSetRFSettingsRaw(::grpc::ClientContext* context, const ::rfcontrol::RFConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rfcontrol::RFResponse>::Create(channel_.get(), cq, rpcmethod_SetRFSettings_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rfcontrol::RFResponse>* RFController::Stub::PrepareAsyncSetRFSettingsRaw(::grpc::ClientContext* context, const ::rfcontrol::RFConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rfcontrol::RFResponse>::Create(channel_.get(), cq, rpcmethod_SetRFSettings_, context, request, false);
}

::grpc::Status RFController::Stub::GetCurrentSettings(::grpc::ClientContext* context, const ::rfcontrol::DeviceQuery& request, ::rfcontrol::CurrentSettings* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCurrentSettings_, context, request, response);
}

void RFController::Stub::experimental_async::GetCurrentSettings(::grpc::ClientContext* context, const ::rfcontrol::DeviceQuery* request, ::rfcontrol::CurrentSettings* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCurrentSettings_, context, request, response, std::move(f));
}

void RFController::Stub::experimental_async::GetCurrentSettings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rfcontrol::CurrentSettings* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCurrentSettings_, context, request, response, std::move(f));
}

void RFController::Stub::experimental_async::GetCurrentSettings(::grpc::ClientContext* context, const ::rfcontrol::DeviceQuery* request, ::rfcontrol::CurrentSettings* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCurrentSettings_, context, request, response, reactor);
}

void RFController::Stub::experimental_async::GetCurrentSettings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rfcontrol::CurrentSettings* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCurrentSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rfcontrol::CurrentSettings>* RFController::Stub::AsyncGetCurrentSettingsRaw(::grpc::ClientContext* context, const ::rfcontrol::DeviceQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rfcontrol::CurrentSettings>::Create(channel_.get(), cq, rpcmethod_GetCurrentSettings_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rfcontrol::CurrentSettings>* RFController::Stub::PrepareAsyncGetCurrentSettingsRaw(::grpc::ClientContext* context, const ::rfcontrol::DeviceQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::rfcontrol::CurrentSettings>::Create(channel_.get(), cq, rpcmethod_GetCurrentSettings_, context, request, false);
}

RFController::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RFController_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RFController::Service, ::rfcontrol::RFConfig, ::rfcontrol::RFResponse>(
          [](RFController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rfcontrol::RFConfig* req,
             ::rfcontrol::RFResponse* resp) {
               return service->SetRFSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RFController_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RFController::Service, ::rfcontrol::DeviceQuery, ::rfcontrol::CurrentSettings>(
          [](RFController::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::rfcontrol::DeviceQuery* req,
             ::rfcontrol::CurrentSettings* resp) {
               return service->GetCurrentSettings(ctx, req, resp);
             }, this)));
}

RFController::Service::~Service() {
}

::grpc::Status RFController::Service::SetRFSettings(::grpc::ServerContext* context, const ::rfcontrol::RFConfig* request, ::rfcontrol::RFResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RFController::Service::GetCurrentSettings(::grpc::ServerContext* context, const ::rfcontrol::DeviceQuery* request, ::rfcontrol::CurrentSettings* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rfcontrol

